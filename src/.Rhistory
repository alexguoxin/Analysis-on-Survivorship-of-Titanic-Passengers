knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(boot)
?boot
nobs<-100
#true regression coefficients
b0<-1
b1<-2
set.seed(1234)
x<-rnorm(nobs,0,1)
#I generate more noisy data so that the p-values are not 0
# and we can compare different methods
y<-b0+b1*x+rnorm(nobs,0,5)
dat.reg<-data.frame(y=y,x=x)
lm.original<-lm(y~x,data=dat.reg)
b1_hat_original<-lm.original$coefficients[2]
se_b1_original<-summary(lm.original)$coef[2,2]
summary(lm.original)
#Draw bootstrap samples
B <- 50000
boot_estimates<-data.frame(b1=c(),s1=c())
set.seed(12345)
for(i in 1:B){
#sample rows of dat.reg with replacement (z=(y,x))
boot_obs<-sample(1:nobs,size = nobs, replace = TRUE)
boot_sample <-dat.reg[boot_obs,]
#compute the OLS slope in each bootstrap sample
lm_b<-summary(lm(y~x,data=boot_sample))$coef
boot_estimates[i,"b1"] <-lm_b[2,1]
#note that in this test I rely on knowing the SE of beta_hat_1
boot_estimates[i,"s1"] <-lm_b[2,2]
}
#Using `boot` package
library(boot)
# create a function that retains estimates of interest
# note that I'm storing only the slope and it's SE
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(y ~ x, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]}
boot_res <- boot(dat.reg, boot.lm, B)
#Note that t1 corresponds to the slope and t2 to its SE
boot_res
#sampling distribution of the estiamted slope
plot(boot_res)
#compare with the bias in `boot_res` object
mean(boot_res$t[,1])-boot_res$t0[1]
#Estimating the SE of the slope: compare with the std.error in `boot_res` object
sqrt(var(boot_res$t[,2]))
#Draw bootstrap samples
B <- 10000
#Using `boot` package
library(boot)
# create a function that retains estimates of interest
# note that I'm storing only the slope and it's SE
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(y ~ x, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]}
boot_res <- boot(dat.reg, boot.lm, B)
#Note that t1 corresponds to the slope and t2 to its SE
boot_res
#sampling distribution of the estiamted slope
plot(boot_res)
#compare with the bias in `boot_res` object
mean(boot_res$t[,1])-boot_res$t0[1]
#Estimating the SE of the slope: compare with the std.error in `boot_res` object
sqrt(var(boot_res$t[,2]))
View(dat.reg)
View(boot_estimates)
View(boot_sample)
View(dat.reg)
View(boot_sample)
View(boot_res)
View(boot_res)
marathon<- read.csv2(url("https://raw.github.ubc.ca/ubc-mds-2017/DSCI_561_regr-1_students/master/labs/lab1/marathonfull.csv?token=AAABq702tjlaslaadgreIVzAEzUkybVkks5aLvFHwA%3D%3D"), header=TRUE, sep=",")
marathon_ful<- marathon %>%
filter(cohort1 == 1) %>%
select(c(age, bmi, female, footwear, group, injury, mf_d, mf_di, mf_ti,  max, sprint, tempo))%>% mutate(mf_s = mf_d/mf_ti)
marathon_ful$max<- as.numeric(as.character(marathon_ful$max))
marathon_ful$bmi<- as.numeric(as.character(marathon_ful$bmi))
marathon_ful$age<- as.numeric(as.character(marathon_ful$age))
View(marathon_ful)
B <- 10000
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ max, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
plot(boot_res)
(boot_res <- boot(marathon_ful, boot.lm, B))
View(boot_res)
?boot.ci
boot.ci(boot_res,index=2)
#pval
#create a pivotal test statistic from each bootstrapped sample:
z_boot<-(boot_res$t[,1]-boot_res$t0[1])/boot_res$t[,2]
(1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2])))/ ( B + 1)
set.seed(1234)
B <- 10000
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ max, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
#pval
#create a pivotal test statistic from each bootstrapped sample:
z_boot<-(boot_res$t[,1]-boot_res$t0[1])/boot_res$t[,2]
(1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2]))) / (B + 1)
set.seed(1234)
B <- 40000
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ max, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
#pval
#create a pivotal test statistic from each bootstrapped sample:
z_boot<-(boot_res$t[,1]-boot_res$t0[1])/boot_res$t[,2]
(1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2]))) / (B + 1)
set.seed(1234)
B <- 10000
# create a function that retains estimates of interest
# note that I'm storing only the slope and it's SE
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ max, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
#p value
#create a pivotal test statistic from each bootstrapped sample:
z_boot <- (boot_res$t[,1] - boot_res$t0[1]) / boot_res$t[,2]
(p_value <- 1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2]))) / (B + 1))
set.seed(1234)
B <- 10000
# create a function that retains estimates of interest
# note that I'm storing only the slope and it's SE
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ max, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[2,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
#p value
#create a pivotal test statistic from each bootstrapped sample:
z_boot <- (boot_res$t[,1] - boot_res$t0[1]) / boot_res$t[,2]
(p_value <- (1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2]))) / (B + 1))
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
summary(lm(mf_s ~ max, marathon_ful))$coef
(marathon_ful_1b <- marathon_ful %>%
select(max, mf_s) %>%
mutate(mf_s_fitted = beta0 + beta1*marathon_ful$max, residual = mf_s - mf_s_fitted))
ggplot(marathon_ful_1b, aes(x=residual)) +
geom_density()
library(tidyverse)
library(boot)
library(GGally)
str(marathon_ful)
?ggpairs
ggpairs(marathon_ful, columns = (bmi, age, mf_s))
ggpairs(marathon_ful, columns = c(bmi, age, mf_s))
ggpairs(marathon_ful, columns = c("bmi", "age", "mf_s"))
View(marathon)
str(marathon)
?lm
summary(lm(mf_s ~ bmi*age, marathon_ful))
# fit model without interaction effect
summary(lm(mf_s ~ bmi+age, marathon_ful))
set.seed(1234)
B <- 10000
# create a function that retains estimates of interest
# note that I'm storing only the slope and it's SE
boot.lm <- function(data, indices){
data <- data[indices,] # select obs. in bootstrap sample
lm_boot <- lm(mf_s ~ bmi*age, data=data)
# return estimated slope and SE
summary(lm_boot)$coef[4,1:2]
}
(boot_res <- boot(marathon_ful, boot.lm, B))
#p value
#create a pivotal test statistic from each bootstrapped sample:
z_boot <- (boot_res$t[,1] - boot_res$t0[1]) / boot_res$t[,2]
(p_value <- (1 + sum(abs(z_boot) > abs(boot_res$t0[1]/boot_res$t0[2]))) / (B + 1))
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
n <- nrow(marathon_ful_1b)
SD <- sqrt(sum(marathon_ful_1b$residual^2)/(n-2))
(SE <- SD/(sqrt(n-1)*sd(marathon_ful_1b$max)))
summary(lm_max)$coef
summary(lm_max)
summary(lm_max)$coef
summary(lm_max)
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
?cor
?corr
?cor
marathon<- read.csv2(url("https://raw.github.ubc.ca/ubc-mds-2017/DSCI_561_regr-1_students/master/labs/lab1/marathonfull.csv?token=AAABq702tjlaslaadgreIVzAEzUkybVkks5aLvFHwA%3D%3D"), header=TRUE, sep=",")
marathon_ful<- marathon %>%
filter(cohort1 == 1) %>%
select(c(age, bmi, female, footwear, group, injury, mf_d, mf_di, mf_ti,  max, sprint, tempo))%>% mutate(mf_s = mf_d/mf_ti)
marathon_ful$max<- as.numeric(as.character(marathon_ful$max))
marathon_ful$bmi<- as.numeric(as.character(marathon_ful$bmi))
marathon_ful$age<- as.numeric(as.character(marathon_ful$age))
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
(beta1 <- corr(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
?corr
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
View(marathon_ful)
?cor
(beta1 <- cor(x=marathon_ful$max, y=marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
knitr::opts_chunk$set(echo = TRUE)
marathon <- read.csv2(url("https://raw.github.ubc.ca/ubc-mds-2017/DSCI_561_regr-1_students/master/labs/lab1/marathonfull.csv?token=AAABq702tjlaslaadgreIVzAEzUkybVkks5aLvFHwA%3D%3D"), header=TRUE, sep=",")
marathon_ful <- marathon %>%
filter(cohort1 == 1) %>%
select(c(age, bmi, female, footwear, group, injury, mf_d, mf_di, mf_ti,  max, sprint, tempo))%>% mutate(mf_s = mf_d/mf_ti)
library(tidyverse)
library(boot)
library(GGally)
marathon <- read.csv2(url("https://raw.github.ubc.ca/ubc-mds-2017/DSCI_561_regr-1_students/master/labs/lab1/marathonfull.csv?token=AAABq702tjlaslaadgreIVzAEzUkybVkks5aLvFHwA%3D%3D"), header=TRUE, sep=",")
marathon_ful <- marathon %>%
filter(cohort1 == 1) %>%
select(c(age, bmi, female, footwear, group, injury, mf_d, mf_di, mf_ti,  max, sprint, tempo))%>% mutate(mf_s = mf_d/mf_ti)
marathon_ful$max<- as.numeric(as.character(marathon_ful$max))
marathon_ful$bmi<- as.numeric(as.character(marathon_ful$bmi))
marathon_ful$age<- as.numeric(as.character(marathon_ful$age))
View(marathon_ful)
(beta1 <- cor(marathon_ful$max, marathon_ful$mf_s) * sd(marathon_ful$mf_s) / sd(marathon_ful$max))
(beta0 <- mean(marathon_ful$mf_s) - beta1 * mean(marathon_ful$max))
lm_max <- lm(mf_s ~ max, marathon_ful)
summary(lm_max)$coef
View(marathon_ful)
class(marathon_ful)
typeof(marathon_ful)
?cable
?kable
kable(iris)
library(knitr)
kable(iris)
library(tidyverse)
data_path <- "../results/cleaned_titanic.csv"  #args[1]  # input path of the data
#
survive_rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival_rate = mean(survived), mortality_rate = 1 - survival_rate)
getwd()
getwd()
setwd(/Users/Alex/Documents/UBC/Block_3/DSCI_522_dsci-workflows/Lab/milestones/Survivorship-of-Titanic-Passengers/src)
setwd("/Users/Alex/Documents/UBC/Block_3/DSCI_522_dsci-workflows/Lab/milestones/Survivorship-of-Titanic-Passengers/src")
#
survive_rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival_rate = mean(survived), mortality_rate = 1 - survival_rate)
View(survive_rate)
#
survive_rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival_rate = mean(survived), mortality_rate = 1 - survival_rate) %>%
mutate(passenger_class = pclass)
#
survive_rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival_rate = mean(survived), mortality_rate = 1 - survival_rate)
# calculate survival rate and mortality rate for each passenger class
rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival_rate = mean(survived), mortality_rate = 1 - survival_rate)
# calculate survival rate and mortality rate for each passenger class
rate <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival = mean(survived), mortality = 1 - survival)
View(rate)
gathered_rate <- gather(rate, key = 'survivorship', value = 'rate', survival, mortality)
View(gathered_rate)
ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=rate, fill=survivorship), position="fill")
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=rate, fill=survivorship), position="fill")
View(bar_chart)
# calculate the proportion of survival and mortality for each passenger class
proportion <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(survival = mean(survived), mortality = 1 - survival)
# gather the
gathered_rate <- gather(proportion, key = 'survivorship', value = 'proportion', survival, mortality)
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill")
View(proportion)
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality for Each Passenger Class")
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality for Each Passenger Class")
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality for Each Passenger Class")
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality for Each Passenger Class")
bar_chart
# calculate the proportion of survival and mortality for each passenger class
proportion <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(Survival = mean(survived), mortality = 1 - Survival)
# gather the table for bar chart
gathered_rate <- gather(proportion, key = 'Survivorship', value = 'Proportion', Survival, Mortality)
View(gathered_rate)
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=proportion, fill=survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality\nfor Each Passenger Class")
bar_chart
# calculate the proportion of survival and mortality for each passenger class
proportion <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(Survival = mean(survived), mortality = 1 - Survival)
View(proportion)
# calculate the proportion of survival and mortality for each passenger class
proportion <- read.csv(data_path) %>%
group_by(pclass) %>%
summarise(Survival = mean(survived), Mortality = 1 - Survival)
# gather the table for bar chart
gathered_rate <- gather(proportion, key = 'Survivorship', value = 'Proportion', Survival, Mortality)
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=Proportion, fill=Survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality\nfor Each Passenger Class")
bar_chart
# bar chart showing the proportion of survival and mortality for each passenger class
bar_chart <- ggplot(gathered_rate, aes(x=pclass)) +
geom_bar(aes(weight=Proportion, fill=Survivorship), position="fill") +
labs(x="Passenger Class", y="Proportion", title="Survival and Mortality\nfor Each Passenger Class") +
theme(plot.title = element_text(hjust = 0.5))
bar_chart
figure_path <- ../results/figure/bar_chart.png #args[2]  # output path of the figure
source('~/Documents/UBC/Block_3/DSCI_522_dsci-workflows/Lab/milestones/Survivorship-of-Titanic-Passengers/src/analysis.R')
?t.test
data_path <- "../results/cleaned_titanic.csv" #args[1]  # input path of the data
#
titanic <- read.csv(data_path)
View(titanic)
View(proportion)
View(proportion)
#
titanic <- read.csv(data_path, row.names = FALSE)
View(titanic)
#
titanic <- read.csv(data_path, row.names = FALSE)
View(titanic)
#
titanic <- read.csv(data_path)
t.test(titanic$pclass, titanic$survived)
independence_test(titanic$survived ~ titanic$pclass)
library(coin)
independence_test(titanic$survived ~ titanic$pclass)
?independence_test
str(titanic)
#
titanic <- read.csv(data_path)
titanic$survived <- as.factor(titanic$survived)
titanic$pclass <- as.factor(titanic$pclass)
independence_test(titanic$survived ~ titanic$pclass)
str(titanic)
summary(independence_test(titanic$survived ~ titanic$pclass))
library(broom)
tidy(independence_test(titanic$survived ~ titanic$pclass))
tidy(independence_test(titanic$survived ~ titanic$pclass))
independence_test(titanic$survived ~ titanic$pclass)
p <- independence_test(titanic$survived ~ titanic$pclass)
View(p)
?kable
?kable
knitr::opts_chunk$set(echo = FALSE)
kable(read.csv("../results/proportion.csv"))
read.csv("../results/proportion.csv")
titanic <- read.csv("../results/cleaned_titanic.csv")
titanic$survived <- as.factor(titanic$survived)
titanic$pclass <- as.factor(titanic$pclass)
independence_test(titanic$survived ~ titanic$pclass)
